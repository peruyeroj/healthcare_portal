name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  DOCKERHUB_USERNAME: peruyeoj   
  IMAGE_NAME: healthcare-henmed                 # e.g., myapp
  ECS_SERVICE_FRONTEND: HenMed-Backendv5
  ECS_SERVICE_BACKEND: HenMed-Frontendv5
  ECS_CLUSTER: HenMed-HTTP
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: henmed

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file
        run: echo "$DOCKER_ENV_FILE" > .env
        env:
          DOCKER_ENV_FILE: ${{ secrets.DOCKER_ENV_FILE }}  # The secret containing the .env file content

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: peruyeoj
          password: Test123456

      - name: Build and push Docker image to Docker Hub
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE=$DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


